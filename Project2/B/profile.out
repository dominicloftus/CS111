Total: 1534 samples
    1359  88.6%  88.6%     1534 100.0% threadFunc
     132   8.6%  97.2%      132   8.6% __strcmp_sse42
      22   1.4%  98.6%       95   6.2% SortedList_lookup
      20   1.3%  99.9%       80   5.2% SortedList_insert
       1   0.1% 100.0%        1   0.1% _init
       0   0.0% 100.0%     1534 100.0% __clone
       0   0.0% 100.0%     1534 100.0% start_thread
ROUTINE ====================== threadFunc in /u/ch/ugrad/loftus/CS111/Project2/B/lab2_list.c
  1359   1534 Total samples (flat / cumulative)
     .      .   30:   if(hash < 0)
     .      .   31:     hash *= -1;
     .      .   32:   return hash % num_lists;
     .      .   33: }
     .      .   34: 
---
     .      .   35: void* threadFunc(void* args){
     .      .   36:   SortedListElement_t* thread_elements = (SortedListElement_t*) args;
     .      .   37:   struct timespec start, end;
     .      .   38:   long lock_wait = 0;
     .      .   39:   
     .      .   40:   for(int i = 0; i < num_iter; i++){
     .      .   41:     long list_num = hashFunc((thread_elements+i)->key);
     .      .   42:     
     .      .   43:     clock_gettime(CLOCK_MONOTONIC, &start);
     .      .   44:     if(opt_sync == 'm')
     .      .   45:       pthread_mutex_lock(mut+list_num);
     .      .   46:     if(opt_sync == 's')
   706    706   47:       while(__sync_lock_test_and_set(spinlock+list_num, 1));
     .      .   48:     clock_gettime(CLOCK_MONOTONIC, &end);
     .      .   49:     
     .      .   50:     lock_wait += 1000000000 * ((long) (end.tv_sec - start.tv_sec)) +
     .      .   51:     end.tv_nsec - start.tv_nsec;
     .      .   52:     
     .     80   53:     SortedList_insert(head+list_num, thread_elements+i);
     .      .   54: 
     .      .   55:     if(opt_sync == 'm')
     .      .   56:       pthread_mutex_unlock(mut+list_num);
     .      .   57:     if(opt_sync == 's')
     .      .   58:       __sync_lock_release(spinlock+list_num);
     .      .   59:   }
     .      .   60: 
     .      .   61:   long len = 0;
     .      .   62:   for(int i = 0; i < num_lists; i++){
     .      .   63:     clock_gettime(CLOCK_MONOTONIC, &start);
     .      .   64:     if(opt_sync == 'm')
     .      .   65:       pthread_mutex_lock(mut+i);
     .      .   66:     if(opt_sync == 's')
     .      .   67:       while(__sync_lock_test_and_set(spinlock+i, 1));
     .      .   68:     clock_gettime(CLOCK_MONOTONIC, &end);
     .      .   69:     lock_wait += 1000000000 * ((long) (end.tv_sec - start.tv_sec)) +
     .      .   70:     end.tv_nsec - start.tv_nsec;
     .      .   71:     
     .      .   72:     long temp = SortedList_length(head+i);
     .      .   73:     if(temp == -1){
     .      .   74:       fprintf(stderr, "Error: Unable to get list length\n");
     .      .   75:       exit(2);
     .      .   76:     }
     .      .   77:     len += temp;
     .      .   78: 
     .      .   79:     if(opt_sync == 'm')
     .      .   80:       pthread_mutex_unlock(mut+i);
     .      .   81:     if(opt_sync == 's')
     .      .   82:       __sync_lock_release(spinlock+i);
     .      .   83:     
     .      .   84:     
     .      .   85:   }
     .      .   86: 
     .      .   87: 
     .      .   88:   for(int i = 0; i < num_iter; i++){
     .      .   89:     long list_num = hashFunc((thread_elements+i)->key);
     .      .   90: 
     .      .   91:     clock_gettime(CLOCK_MONOTONIC, &start);
     .      .   92:     if(opt_sync == 'm')
     .      .   93:       pthread_mutex_lock(mut+list_num);
     .      .   94:     if(opt_sync == 's')
   653    653   95:       while(__sync_lock_test_and_set(spinlock+list_num, 1));
     .      .   96:     clock_gettime(CLOCK_MONOTONIC, &end);
     .      .   97:     lock_wait += 1000000000 * ((long) (end.tv_sec - start.tv_sec)) +
     .      .   98:     end.tv_nsec - start.tv_nsec;
     .      .   99:     
     .     95  100:     SortedListElement_t* to_be_deleted = SortedList_lookup(head+list_num, (thread_elements+i)->key);
     .      .  101: 
     .      .  102:     if(to_be_deleted == NULL){
     .      .  103:       fprintf(stderr, "Error: Unable to find inserted element\n");
     .      .  104:       exit(2);
     .      .  105:     }
     .      .  106:     if(SortedList_delete(to_be_deleted)){
     .      .  107:       fprintf(stderr, "Error: corrupted prev/next pointers on delete\n");
     .      .  108:       exit(2);
     .      .  109:     }
     .      .  110: 
     .      .  111:     if(opt_sync == 'm')
     .      .  112:       pthread_mutex_unlock(mut+list_num);
     .      .  113:     if(opt_sync == 's')
     .      .  114:       __sync_lock_release(spinlock+list_num);
     .      .  115:   }
     .      .  116: 
     .      .  117:   
     .      .  118:   pthread_exit((void*)(lock_wait));
---
     .      .  119: }
     .      .  120: 
     .      .  121: 
     .      .  122: 
     .      .  123: void segFaultHandler(){
ROUTINE ====================== threadFunc in /u/ch/ugrad/loftus/CS111/Project2/B/lab2_list.c
  1359   1534 Total samples (flat / cumulative)
     .      .   30:   if(hash < 0)
     .      .   31:     hash *= -1;
     .      .   32:   return hash % num_lists;
     .      .   33: }
     .      .   34: 
---
     .      .   35: void* threadFunc(void* args){
     .      .   36:   SortedListElement_t* thread_elements = (SortedListElement_t*) args;
     .      .   37:   struct timespec start, end;
     .      .   38:   long lock_wait = 0;
     .      .   39:   
     .      .   40:   for(int i = 0; i < num_iter; i++){
     .      .   41:     long list_num = hashFunc((thread_elements+i)->key);
     .      .   42:     
     .      .   43:     clock_gettime(CLOCK_MONOTONIC, &start);
     .      .   44:     if(opt_sync == 'm')
     .      .   45:       pthread_mutex_lock(mut+list_num);
     .      .   46:     if(opt_sync == 's')
   706    706   47:       while(__sync_lock_test_and_set(spinlock+list_num, 1));
     .      .   48:     clock_gettime(CLOCK_MONOTONIC, &end);
     .      .   49:     
     .      .   50:     lock_wait += 1000000000 * ((long) (end.tv_sec - start.tv_sec)) +
     .      .   51:     end.tv_nsec - start.tv_nsec;
     .      .   52:     
     .     80   53:     SortedList_insert(head+list_num, thread_elements+i);
     .      .   54: 
     .      .   55:     if(opt_sync == 'm')
     .      .   56:       pthread_mutex_unlock(mut+list_num);
     .      .   57:     if(opt_sync == 's')
     .      .   58:       __sync_lock_release(spinlock+list_num);
     .      .   59:   }
     .      .   60: 
     .      .   61:   long len = 0;
     .      .   62:   for(int i = 0; i < num_lists; i++){
     .      .   63:     clock_gettime(CLOCK_MONOTONIC, &start);
     .      .   64:     if(opt_sync == 'm')
     .      .   65:       pthread_mutex_lock(mut+i);
     .      .   66:     if(opt_sync == 's')
     .      .   67:       while(__sync_lock_test_and_set(spinlock+i, 1));
     .      .   68:     clock_gettime(CLOCK_MONOTONIC, &end);
     .      .   69:     lock_wait += 1000000000 * ((long) (end.tv_sec - start.tv_sec)) +
     .      .   70:     end.tv_nsec - start.tv_nsec;
     .      .   71:     
     .      .   72:     long temp = SortedList_length(head+i);
     .      .   73:     if(temp == -1){
     .      .   74:       fprintf(stderr, "Error: Unable to get list length\n");
     .      .   75:       exit(2);
     .      .   76:     }
     .      .   77:     len += temp;
     .      .   78: 
     .      .   79:     if(opt_sync == 'm')
     .      .   80:       pthread_mutex_unlock(mut+i);
     .      .   81:     if(opt_sync == 's')
     .      .   82:       __sync_lock_release(spinlock+i);
     .      .   83:     
     .      .   84:     
     .      .   85:   }
     .      .   86: 
     .      .   87: 
     .      .   88:   for(int i = 0; i < num_iter; i++){
     .      .   89:     long list_num = hashFunc((thread_elements+i)->key);
     .      .   90: 
     .      .   91:     clock_gettime(CLOCK_MONOTONIC, &start);
     .      .   92:     if(opt_sync == 'm')
     .      .   93:       pthread_mutex_lock(mut+list_num);
     .      .   94:     if(opt_sync == 's')
   653    653   95:       while(__sync_lock_test_and_set(spinlock+list_num, 1));
     .      .   96:     clock_gettime(CLOCK_MONOTONIC, &end);
     .      .   97:     lock_wait += 1000000000 * ((long) (end.tv_sec - start.tv_sec)) +
     .      .   98:     end.tv_nsec - start.tv_nsec;
     .      .   99:     
     .     95  100:     SortedListElement_t* to_be_deleted = SortedList_lookup(head+list_num, (thread_elements+i)->key);
     .      .  101: 
     .      .  102:     if(to_be_deleted == NULL){
     .      .  103:       fprintf(stderr, "Error: Unable to find inserted element\n");
     .      .  104:       exit(2);
     .      .  105:     }
     .      .  106:     if(SortedList_delete(to_be_deleted)){
     .      .  107:       fprintf(stderr, "Error: corrupted prev/next pointers on delete\n");
     .      .  108:       exit(2);
     .      .  109:     }
     .      .  110: 
     .      .  111:     if(opt_sync == 'm')
     .      .  112:       pthread_mutex_unlock(mut+list_num);
     .      .  113:     if(opt_sync == 's')
     .      .  114:       __sync_lock_release(spinlock+list_num);
     .      .  115:   }
     .      .  116: 
     .      .  117:   
     .      .  118:   pthread_exit((void*)(lock_wait));
---
     .      .  119: }
     .      .  120: 
     .      .  121: 
     .      .  122: 
     .      .  123: void segFaultHandler(){
